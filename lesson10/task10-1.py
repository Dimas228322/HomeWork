#1. Реализовать класс Matrix (матрица).
#Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.

#Примеры матриц: 3 на 2, 3 на 3, 2 на 4.
#| 31 22 |
#| 37 43 |
#| 51 86 |

#|  3  5 32 |
#|  2  4  6 |

#| -1 64 -8 |
#| 3 5 8 3 |
#| 8 3 7 1 |
#Техническое задание:

#Элементы матрицы - целые числа(для простоты)
#Данные в матрице хранятся как список списков целых чисел.
#Реализовать перегрузку метода 'str()' для вывода матрицы в привычном виде - как в примере. Выравнивание чисел не обязательно, но желательно. Метод 'str()' возвращает строку.
#Реализовать перегрузку метода 'add()' для сложения двух объектов класса Matrix (двух матриц). Результатом сложения должна быть новая матрица. Метод 'add()' возвращает новую матрицу# .
# Исходные матрицы остаются неизменными. Сложение элементов матриц выполнять поэлементно. Первый элемент первой строки первой матрицы складываем с первым элементом первой строки второй матрицы и т.д.
# Поэтому количество строк в обоих матрицах должно быть одинаковым. Аналогично со столбцами.
#Подумайте о проверках корректности данных при создании матрицы и при их сложении.
#Какие могут быть ошибки, когда мы работаем со списком списков.
#Что делают операторы (например сложения), когда выполнить операцию невозможно?
#Создать несколько матриц разного размера.
#Вывести их с помощью print
#Выполнить сложение матриц и вывести результат сложения
#Подтвердить, что после сложения полученный объект имеет тип матрица.
class Matrix():

    def __init__(self, lst):
        self.lst = lst
    def __str__(self):
        rez = ""
        for n in self.lst:
            rez += "| "
            for allcounts in n:
                rez += f"{allcounts}  "
            rez += "|\n"
        return rez

    @property
    def prop(self):
        return len(self.lst), len(self.lst[0])

    def __add__(self, other):
        new_list = []
        if self.prop != other.prop:
            raise ValueError("количество строк в обоих матрицах должно быть одинаковым")
        for index, num in enumerate(self.lst):
            list2 = []
            for indexv2, left in enumerate(num):
                list2.append(self.lst[index][indexv2] + other.lst[index][indexv2])
            new_list.append(list2)
        return Matrix(new_list)


m1 = Matrix([[11,2,3],[4,5,6],[117,8,9]])
print(m1)
print(type(m1))
m2 = Matrix([[1,1,1],[1,1,1],[1,1,1]])
print(m2)
print(type(m2))
matr = m1 + m2
print(matr)
print(type(matr))
m3 = Matrix([[1,1,1],[1,1,1]])
m4 = m1 + m3
print(m4)























